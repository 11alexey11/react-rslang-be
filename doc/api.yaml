openapi: 3.0.0
info:
  title: Learn Words
  description: a backend part of RSSchool Stage#2 task
  version: 1.0.0

servers:
  - url: /

components:
  schemas:
    Word:
      type: object
      properties:
        word:
          type: string
        image:
          type: string
        audio:
          type: string
        audioMeaning:
          type: string
        audioExample:
          type: string
        textMeaning:
          type: string
        textExample:
          type: string
        transcription:
          type: string
    WordCount:
      type: object
      properties:
        count:
          type: number
#    User:
#      type: object
#      properties:
#        id:
#          type: string
#        name:
#          type: string
#        login:
#          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /words:
    parameters:
      - name: page
        in: query
        required: false
        schema:
          type: string
      - name: perPage
        in: query
        required: false
        schema:
          type: string
    get:
      tags:
        - words
      summary: Get a chunk words
      description: Gets a chink of words
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Word"
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /words/count:
    get:
      tags:
        - words
      summary: Get a total number of words
      description: Get a total number of words
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/WordCount"
        401:
          $ref: '#/components/responses/UnauthorizedError'
#  /users:
#    get:
#      tags:
#        - Users
#      summary: Get all users
#      description: Gets all users (remove password from response)
#      responses:
#        200:
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/User"
#        401:
#          $ref: '#/components/responses/UnauthorizedError'
#    post:
#      tags:
#        - Users
#      summary: Create user
#      description: Creates a new user (remove password from response)
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              title: example
#              properties:
#                name:
#                  type: string
#                  description: The user's name
#                login:
#                  type: string
#                  description: The user's login
#                password:
#                  type: string
#                  description: The user's password
#              required:
#                - name
#      responses:
#        200:
#          description: The user has been created.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/User"
#        400:
#          description: Bad request
#        401:
#          $ref: '#/components/responses/UnauthorizedError'
#  /users/{userId}:
#    parameters:
#      - name: userId
#        in: path
#        required: true
#        schema:
#          type: string
#    get:
#      tags:
#        - Users
#      summary: Get user by ID
#      description: Gets a user by ID
#        e.g. “/users/123” (remove password from response)
#      responses:
#        200:
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/User"
#        401:
#          $ref: '#/components/responses/UnauthorizedError'
#        404:
#          description: User not found
#    put:
#      tags:
#        - Users
#      summary: Update a user
#      description: Updates a user by ID
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              title: example
#              properties:
#                name:
#                  type: string
#                  description: The user's name
#                login:
#                  type: string
#                  description: The user's login
#                password:
#                  type: string
#                  description: The user's password
#              required:
#                - name
#      responses:
#        200:
#          description: The user has been updated.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/User"
#        400:
#          description: Bad request
#        401:
#          $ref: '#/components/responses/UnauthorizedError'
#    delete:
#      tags:
#        - Users
#      summary: Delete user
#      description: Deletes user by ID. When somebody
#        DELETE User, all Tasks where User is assignee
#        should be updated to put userId=null
#      responses:
#        204:
#          description: The user has been deleted
#        401:
#          $ref: '#/components/responses/UnauthorizedError'
#        404:
#          description: User not found
#  /login:
#    post:
#      tags:
#        - Login
#      security:
#        []
#      summary: Login
#      description: Logins a user and returns a JWT-token
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              title: example
#              properties:
#                login:
#                  type: string
#                  description: Username
#                password:
#                  type: string
#                  description: Password
#              required:
#                - user
#                - login
#      responses:
#        200:
#          description: Successful login.
#          content:
#            application/json:
#              schema:
#                type: string
#                description: JWT Token
#        403:
#          description: Incorrect login or password

openapi: 3.0.0
info:
  title: Learn Words
  description: a backend part of RSSchool Stage#2 task
  version: 1.0.0

servers:
  - url: /

components:
  schemas:
    Word:
      type: object
      properties:
        word:
          type: string
        image:
          type: string
        audio:
          type: string
        audioMeaning:
          type: string
        audioExample:
          type: string
        textMeaning:
          type: string
        textExample:
          type: string
        transcription:
          type: string
    WordCount:
      type: object
      properties:
        count:
          type: number
    UserWord:
      type: object
      properties:
        wordId:
          type: string
        userId:
          type: string
        difficulty:
          type: string
        optional:
          type: array
          items:
            type: any
    Statistics:
      type: object
      properties:
        learnedWords:
          type: number
        optional:
          type: array
          items:
            type: any
    Settings:
      type: object
      properties:
        wordsPerDay:
          type: number
        optional:
          type: array
          items:
            type: any
#    User:
#      type: object
#      properties:
#        id:
#          type: string
#        name:
#          type: string
#        login:
#          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /words:
    parameters:
      - name: group
        in: query
        required: false
        description: group number
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: page in the group
        schema:
          type: string
    get:
      tags:
        - Words
      summary: Get a chunk words
      description: Gets a chink of words
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Word"
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /words/count:
    get:
      tags:
        - Words
      summary: Get a total number of words
      description: Get a total number of words
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/WordCount"
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /words/{id}:
    parameters:
      - name: wordId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: query
        required: true
        schema:
          type: string
    get:
      tags:
        - Words
      summary: Get a user word by id and user id
      description: Gets a user word by id and user id
        e.g. “/words/123”
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWord"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: UserWord not found
    post:
      tags:
        - Words
      summary: Create a user word
      description: Create a user word by id and user id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                wordId:
                  type: string
                userId:
                  type: string
                difficulty:
                  type: string
                optional:
                  type: array
                  items:
                    type: any
      responses:
        200:
          description: The user word has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWord"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Words
      summary: Update a user word
      description: Updates a user word by id and user id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                wordId:
                  type: string
                userId:
                  type: string
                difficulty:
                  type: string
                optional:
                  type: array
                  items:
                    type: any
      responses:
        200:
          description: The user word has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWord"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Words
      summary: Delete user word
      description: Deletes user words by id and user id
      responses:
        204:
          description: The user word has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: UserWord not found
  /statistics:
    get:
      tags:
        - Statistics
      summary: Get all statistics
      description: Gets all statistics
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Statistics"
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Statistics
      summary: Create statistics
      description: Creates a new statistics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                learnedWords:
                  type: number
                  description: The number of the total learned words
                optional:
                  type: array
                  items:
                    type: any
      responses:
        200:
          description: The statistics has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistics"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /statistics/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Statistics
      summary: Get statistics by id
      description: Gets a statistics by id
        e.g. “/statistics/123”
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistics"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Statistics not found
    put:
      tags:
        - Statistics
      summary: Update a statistics
      description: Updates a statistics by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                learnedWords:
                  type: number
                  description: The number of the total learned words
                optional:
                  type: array
                  items:
                    type: any
      responses:
        200:
          description: The statistics has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Statistics"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Statistics
      summary: Delete statistics
      description: Deletes statistics by id
      responses:
        204:
          description: The statistics has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Statistics not found

  /settings:
    get:
      tags:
        - Settings
      summary: Get all settings
      description: Gets all settings
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Settings"
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Settings
      summary: Create settings
      description: Creates a new settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                wordsPerDay:
                  type: number
                  description: The max number of learned words per day
                optional:
                  type: array
                  items:
                    type: any
      responses:
        200:
          description: The settings has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /settings/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Settings
      summary: Get settings by id
      description: Gets a settings by id
        e.g. “/settings/123”
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Statistics not found
    put:
      tags:
        - Settings
      summary: Update a settings
      description: Updates a settings by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                wordsPerDay:
                  type: number
                  description: The max number of learned words per day
                optional:
                  type: array
                  items:
                    type: any
      responses:
        200:
          description: The settings has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        400:
          description: Bad request
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Settings
      summary: Delete settings
      description: Deletes settings by id
      responses:
        204:
          description: The settings has been deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Statistics not found

#  /login:
#    post:
#      tags:
#        - Login
#      security:
#        []
#      summary: Login
#      description: Logins a user and returns a JWT-token
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              title: example
#              properties:
#                login:
#                  type: string
#                  description: Username
#                password:
#                  type: string
#                  description: Password
#              required:
#                - user
#                - login
#      responses:
#        200:
#          description: Successful login.
#          content:
#            application/json:
#              schema:
#                type: string
#                description: JWT Token
#        403:
#          description: Incorrect login or password
